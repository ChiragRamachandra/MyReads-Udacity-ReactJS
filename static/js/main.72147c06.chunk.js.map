{"version":3,"sources":["components/Book.js","components/BookShelf.js","BooksAPI.js","pages/Home.js","pages/Search.js","App.js","serviceWorker.js","index.js"],"names":["Book","title","author","url","onChangeHandler","id","state","className","style","width","height","backgroundImage","onChange","defaultValue","value","disabled","BookShelf","bookArray","bookComponent","map","book","key","imageLinks","thumbnail","authors","shelf","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","then","res","json","data","getAll","books","update","method","body","JSON","stringify","search","query","Home","useState","Books","setBooks","currentBooks","wantBooks","readBooks","useEffect","fetchBooks","filter","event","a","preventDefault","target","to","Search","setQuery","allBooks","setAllBooks","onSearchHandler","length","allBook","type","placeholder","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72147c06.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nconst Book = ({ title, author, url, onChangeHandler, id, state }) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"book\">\n\t\t\t\t<div className=\"book-top\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"book-cover\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: 128,\n\t\t\t\t\t\t\theight: 193,\n\t\t\t\t\t\t\tbackgroundImage: 'url(' + url + ')'\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"book-shelf-changer\">\n\t\t\t\t\t\t<select id={id} onChange={onChangeHandler} defaultValue={state}>\n\t\t\t\t\t\t\t<option value=\"move\" disabled>\n\t\t\t\t\t\t\t\tMove to...\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t<option value=\"none\">None</option>\n\t\t\t\t\t\t\t<option value=\"currentlyReading\">Currently Reading</option>\n\t\t\t\t\t\t\t<option value=\"wantToRead\">Want to Read</option>\n\t\t\t\t\t\t\t<option value=\"read\">Read</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"book-title\">{title}</div>\n\t\t\t\t<div className=\"book-authors\">{author}</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default Book;\n","import React, { Fragment } from 'react';\nimport Book from './Book';\n\nconst BookShelf = ({ title, bookArray, onChangeHandler }) => {\n\tlet bookComponent = null;\n\n\tif (bookArray) {\n\t\tbookComponent = bookArray.map((book) => {\n\t\t\treturn (\n\t\t\t\t<li key={book.id}>\n\t\t\t\t\t<Book\n\t\t\t\t\t\tid={book.id}\n\t\t\t\t\t\turl={book.imageLinks.thumbnail}\n\t\t\t\t\t\ttitle={book.title}\n\t\t\t\t\t\tauthor={book.authors}\n\t\t\t\t\t\tonChangeHandler={onChangeHandler}\n\t\t\t\t\t\tstate={book.shelf}\n\t\t\t\t\t/>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t}\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"bookshelf\">\n\t\t\t\t<h2 className=\"bookshelf-title\">{title}</h2>\n\t\t\t\t<div className=\"bookshelf-books\">\n\t\t\t\t\t<ol className=\"books-grid\">{bookComponent}</ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default BookShelf;\n","const api = 'https://reactnd-books-api.udacity.com';\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n\tAccept: 'application/json',\n\tAuthorization: token\n};\n\nexport const get = (bookId) =>\n\tfetch(`${api}/books/${bookId}`, { headers }).then((res) => res.json()).then((data) => data.book);\n\nexport const getAll = () => fetch(`${api}/books`, { headers }).then((res) => res.json()).then((data) => data.books);\n\nexport const update = (book, shelf) =>\n\tfetch(`${api}/books/${book.id}`, {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\t...headers,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({ shelf })\n\t}).then((res) => res.json());\n\nexport const search = (query) =>\n\tfetch(`${api}/search`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t...headers,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({ query })\n\t})\n\t\t.then((res) => res.json())\n\t\t.then((data) => data.books);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport BookShelf from '../components/BookShelf';\nimport { getAll, update, get } from '../BooksAPI';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n\tconst [ Books, setBooks ] = useState();\n\n\tlet currentBooks = null;\n\tlet wantBooks = null;\n\tlet readBooks = null;\n\n\tuseEffect(() => {\n\t\tfetchBooks();\n\t}, []);\n\n\tconst fetchBooks = () => {\n\t\tgetAll().then((data) => {\n\t\t\tsetBooks(data);\n\t\t});\n\t};\n\n\tif (Books) {\n\t\tcurrentBooks = Books.filter((book) => {\n\t\t\treturn book.shelf === 'currentlyReading';\n\t\t});\n\t\twantBooks = Books.filter((book) => {\n\t\t\treturn book.shelf === 'wantToRead';\n\t\t});\n\t\treadBooks = Books.filter((book) => {\n\t\t\treturn book.shelf === 'read';\n\t\t});\n\t}\n\n\tconst onChangeHandler = async (event) => {\n\t\tevent.preventDefault();\n\t\tlet shelf = event.target.value.toString();\n\t\tif (event.target.value === 'none') {\n\t\t\t//dont update\n\t\t} else {\n\t\t\tconst book = await get(event.target.id);\n\t\t\tawait update(book, shelf);\n\t\t\tfetchBooks();\n\t\t}\n\t};\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"app\">\n\t\t\t\t<div className=\"list-books\">\n\t\t\t\t\t<div className=\"list-books-title\">\n\t\t\t\t\t\t<h1>MyReads</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"list-books-content\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<BookShelf\n\t\t\t\t\t\t\t\ttitle=\"Currently Reading\"\n\t\t\t\t\t\t\t\tbookArray={currentBooks}\n\t\t\t\t\t\t\t\tonChangeHandler={onChangeHandler}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<BookShelf title=\"Want To Read\" bookArray={wantBooks} onChangeHandler={onChangeHandler} />\n\t\t\t\t\t\t\t<BookShelf title=\"Read\" bookArray={readBooks} onChangeHandler={onChangeHandler} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"open-search\">\n\t\t\t\t\t\t<Link to=\"/search\">\n\t\t\t\t\t\t\t<button>Search</button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default Home;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { search, update, get, getAll } from '../BooksAPI';\nimport Book from '../components/Book';\n\nconst Search = () => {\n\tconst [ query, setQuery ] = useState('');\n\tconst [ books, setBooks ] = useState();\n\tconst [ allBooks, setAllBooks ] = useState();\n\tlet bookComponent = null;\n\n\tuseEffect(() => {\n\t\tfetchBooks();\n\t}, []);\n\n\tconst fetchBooks = () => {\n\t\tgetAll().then((data) => {\n\t\t\tsetAllBooks(data);\n\t\t});\n\t};\n\n\tconst onSearchHandler = async (event) => {\n\t\tevent.preventDefault();\n\t\tsetQuery(event.target.value);\n\t\tif (query) {\n\t\t\tconst res = await search(query);\n\t\t\tsetBooks(res);\n\t\t}\n\t};\n\n\tconst onChangeHandler = async (event) => {\n\t\tevent.preventDefault();\n\t\tlet shelf = event.target.value.toString();\n\t\tif (event.target.value === 'none') {\n\t\t\t//dont update\n\t\t} else {\n\t\t\tconst book = await get(event.target.id);\n\t\t\tawait update(book, shelf);\n\t\t}\n\t};\n\n\tif (books !== 'undefined' && books != null && books.length != null && books.length > 0) {\n\t\tbookComponent = books.map((book) => {\n\t\t\tallBooks.map((allBook) => {\n\t\t\t\tif (allBook.id === book.id) {\n\t\t\t\t\tbook.shelf = allBook.shelf;\n\t\t\t\t}\n\t\t\t\treturn allBook;\n\t\t\t});\n\n\t\t\tif (book.imageLinks) {\n\t\t\t\treturn (\n\t\t\t\t\t<li key={book.id}>\n\t\t\t\t\t\t<Book\n\t\t\t\t\t\t\tid={book.id}\n\t\t\t\t\t\t\turl={book.imageLinks.thumbnail}\n\t\t\t\t\t\t\ttitle={book.title}\n\t\t\t\t\t\t\tauthor={book.authors}\n\t\t\t\t\t\t\tonChangeHandler={onChangeHandler}\n\t\t\t\t\t\t\tstate={book.shelf}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<li key={book.id}>\n\t\t\t\t\t<Book\n\t\t\t\t\t\tid={book.id}\n\t\t\t\t\t\ttitle={book.title}\n\t\t\t\t\t\tauthor={book.authors}\n\t\t\t\t\t\tonChangeHandler={onChangeHandler}\n\t\t\t\t\t\tstate={book.shelf}\n\t\t\t\t\t/>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"app\">\n\t\t\t\t<div className=\"search-books\">\n\t\t\t\t\t<div className=\"search-books-bar\">\n\t\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t\t<button className=\"close-search\">Close</button>\n\t\t\t\t\t\t</Link>\n\n\t\t\t\t\t\t<div className=\"search-books-input-wrapper\">\n\t\t\t\t\t\t\t<input type=\"text\" onChange={onSearchHandler} placeholder=\"Search by title or author\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"search-books-results\">\n\t\t\t\t\t\t<ol className=\"books-grid\">{bookComponent}</ol>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default Search;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Search from './pages/Search';\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/search\" component={Search} />\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}